// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/downloadSong.proto

package downloadSong

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DownloadSong service

func NewDownloadSongEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DownloadSong service

type DownloadSongService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (DownloadSong_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (DownloadSong_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (DownloadSong_BidiStreamService, error)
}

type downloadSongService struct {
	c    client.Client
	name string
}

func NewDownloadSongService(name string, c client.Client) DownloadSongService {
	return &downloadSongService{
		c:    c,
		name: name,
	}
}

func (c *downloadSongService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadSong.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadSongService) ClientStream(ctx context.Context, opts ...client.CallOption) (DownloadSong_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "DownloadSong.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &downloadSongServiceClientStream{stream}, nil
}

type DownloadSong_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type downloadSongServiceClientStream struct {
	stream client.Stream
}

func (x *downloadSongServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *downloadSongServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *downloadSongServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *downloadSongServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *downloadSongServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *downloadSongServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *downloadSongService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (DownloadSong_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "DownloadSong.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &downloadSongServiceServerStream{stream}, nil
}

type DownloadSong_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type downloadSongServiceServerStream struct {
	stream client.Stream
}

func (x *downloadSongServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *downloadSongServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *downloadSongServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *downloadSongServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *downloadSongServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *downloadSongServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *downloadSongService) BidiStream(ctx context.Context, opts ...client.CallOption) (DownloadSong_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "DownloadSong.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &downloadSongServiceBidiStream{stream}, nil
}

type DownloadSong_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type downloadSongServiceBidiStream struct {
	stream client.Stream
}

func (x *downloadSongServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *downloadSongServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *downloadSongServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *downloadSongServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *downloadSongServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *downloadSongServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *downloadSongServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DownloadSong service

type DownloadSongHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, DownloadSong_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, DownloadSong_ServerStreamStream) error
	BidiStream(context.Context, DownloadSong_BidiStreamStream) error
}

func RegisterDownloadSongHandler(s server.Server, hdlr DownloadSongHandler, opts ...server.HandlerOption) error {
	type downloadSong interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type DownloadSong struct {
		downloadSong
	}
	h := &downloadSongHandler{hdlr}
	return s.Handle(s.NewHandler(&DownloadSong{h}, opts...))
}

type downloadSongHandler struct {
	DownloadSongHandler
}

func (h *downloadSongHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.DownloadSongHandler.Call(ctx, in, out)
}

func (h *downloadSongHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.DownloadSongHandler.ClientStream(ctx, &downloadSongClientStreamStream{stream})
}

type DownloadSong_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type downloadSongClientStreamStream struct {
	stream server.Stream
}

func (x *downloadSongClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *downloadSongClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *downloadSongClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *downloadSongClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *downloadSongClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *downloadSongHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DownloadSongHandler.ServerStream(ctx, m, &downloadSongServerStreamStream{stream})
}

type DownloadSong_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type downloadSongServerStreamStream struct {
	stream server.Stream
}

func (x *downloadSongServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *downloadSongServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *downloadSongServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *downloadSongServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *downloadSongServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *downloadSongHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.DownloadSongHandler.BidiStream(ctx, &downloadSongBidiStreamStream{stream})
}

type DownloadSong_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type downloadSongBidiStreamStream struct {
	stream server.Stream
}

func (x *downloadSongBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *downloadSongBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *downloadSongBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *downloadSongBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *downloadSongBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *downloadSongBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
